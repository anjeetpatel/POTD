Given a Binary Tree of n nodes, find all the nodes that don't have any siblings. You need to return a list of integers containing all the nodes that don't have a sibling in sorted order (Increasing).

Two nodes are said to be siblings if they are present at the same level, and their parents are the same.

Note: The root node can not have a sibling so it cannot be included in our answer.

Example 1:

Input :
       37
      /   
    20
    /     
  113 

Output: 
20 113
Explanation: 
Nodes 20 and 113 dont have any siblings.

Example 2:

Input :
       1
      / \
     2   3 

Output: 
-1
Explanation: 
Every node has a sibling.
Your Task:  
You don't need to read input or print anything. Complete the function noSibling() which takes the root of the tree as input parameter and returns a list of integers containing all the nodes that don't have a sibling in sorted order. If all nodes have a sibling, then the returning list should contain only one element -1.

Expected Time Complexity: O(nlogn)
Expected Auxiliary Space: O(Height of the tree)

Constraints:
1 ≤ n ≤ 104
//java solution
class Tree
{
    ArrayList<Integer> noSibling(Node node)
    {
          ArrayList<Integer> ans=new ArrayList<>();
        Queue<Node> que=new LinkedList<>();
        que.add(node);
        while(!que.isEmpty()){
            int size=que.size();
            for(int i=0;i<size;i++){
                Node temp=que.poll();
                if(temp.left!=null){
                    que.add(temp.left);
                }
                if(temp.right!=null){
                    que.add(temp.right);
                }
                if(temp.left!=null && temp.right==null){
                    ans.add(temp.left.data);
                }
                if(temp.right!=null && temp.left==null){
                    ans.add(temp.right.data);
                }
            }
        }
        if(ans.size()==0){
            ans.add(-1);
            return ans;
        }else{
            Collections.sort(ans);
            return ans;
        }
    }
}
