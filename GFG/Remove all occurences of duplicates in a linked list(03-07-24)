Given a sorted linked list, delete all nodes that have duplicate numbers (all occurrences), leaving only numbers that appear once in the original list, and return the head of the modified linked list. 

Examples:

Input: Linked List = 23->28->28->35->49->49->53->53
Output: 23 35
Explanation: 

The duplicate numbers are 28, 49 and 53 which are removed from the list.
Input: Linked List = 11->11->11->11->75->75
Output: Empty list
Explanation: 

All the nodes in the linked list have duplicates. Hence the resultant list would be empty.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)
Constraints:
1 ≤ size(list) ≤ 105

//java solution
class Solution {
    public Node removeAllDuplicates(Node head) {
        // code here
        if (head == null || head.next == null) {
            return head;
        }

        // Use a dummy node to handle edge cases easily
        Node dummy = new Node(0);
        dummy.next = head;

        // Use a hashmap to count occurrences of each value
        HashMap<Integer, Integer> countMap = new HashMap<>();
        Node current = head;
        while (current != null) {
            countMap.put(current.data, countMap.getOrDefault(current.data, 0) + 1);
            current = current.next;
        }

        // Remove all nodes that have duplicates
        Node prev = dummy;
        current = head;
        while (current != null) {
            if (countMap.get(current.data) > 1) {
                prev.next = current.next;
            } else {
                prev = current;
            }
            current = current.next;
        }

        return dummy.next;
    }

    // Helper method to print the linked list
    public void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}

