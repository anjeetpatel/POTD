Given two numbers, num1 and num2, represented by linked lists of size n and m respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Note: There can be leading zeros in the input lists, but there should not be any leading zeros in the output list.

Example 1:

Input:
n = 2
num1 = 45 (4->5->null)
m = 3
num2 = 345 (3->4->5->null)
Output: 
3->9->0->null  
Explanation: 
For the given two linked list (4 5) and (3 4 5), after adding the two linked list resultant linked list will be (3 9 0).
Example 2:

Input:
n = 4
num1 = 0063 (0->0->6->3->null)
m = 2
num2 = 07 (0->7->null)
Output: 
7->0->null
Explanation: 
For the given two linked list (0 0 6 3) and (0 7), after adding the two linked list resultant linked list will be (7 0).
Your Task:
The task is to complete the function addTwoLists() which has node reference of both the linked lists and returns the head of the sum list.   

Expected Time Complexity: O(n+m)
Expected Auxiliary Space: O(max(n,m)) for the resultant list.

Constraints:
1 <= n, m <= 104

//java solution
class Solution{
    //Function to add two numbers represented by linked list.
    private static boolean carry=false;
    static Node addTwoLists(Node head1, Node head2){
        // code here
        if(head1==null&&head2==null)//base case
        return null;
        head1=removeZeroes(head1);
        head2=removeZeroes(head2);
        int l1,l2,diff;
        l1=calcLength(head1);//calculate their lengths
        l2=calcLength(head2);
        diff=Math.abs(l1-l2);//difference in their lengths
        Node smallNode=null, bigNode=null;

        //we will have to add zeroes to make length same.

        smallNode= (l1>l2)?head2:head1;
        bigNode= (l1>l2)?head1:head2;
        smallNode = addZeroes(smallNode,diff+1);//adding zeroes in the front
        bigNode=addZeroes(bigNode, 1) ;// adding zero in case carry is generated
        carry=false;
        addll(bigNode, smallNode);
        return removeZeroes(bigNode);
        // return head of sum list

    }
    private static int calcLength(Node head)
    {
        int c=0;
        while(head!=null)
        {
            c++;
            head=head.next;
        }
        return c;
    }
    private static Node addZeroes(Node node,int diff){
        if(node==null)
        return null;        
        Node zeroNode= new Node(0);
        Node temp=zeroNode;
        while(--diff!=0)
        {
            temp.next=new Node(0);
            temp=temp.next;
        }
        temp.next=node;//linking the small number node
        return zeroNode;
    }
    private static Node removeZeroes(Node node)
    {
        while(node!=null&&node.data==0)
        {
            node=node.next;
        }
        if(node==null)
        return new Node(0);
        else
        return node;
    }
    private static void addll(Node l1, Node l2)
    {
        if(l1==null&&l2==null)//base case
        return;        
        addll(l1.next, l2.next);
        int d1=l1.data, d2=l2.data;        
        if(carry) //maximum carry generated can be 1
        {
            d1++;
            carry = false;
        }        
        int sum=d1+d2;
        if(sum>9)
        {
            carry=true;
            sum-=10;
        }
        l1.data=sum;
    }
}
