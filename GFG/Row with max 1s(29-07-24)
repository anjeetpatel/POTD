Given a boolean 2D array, consisting of only 1's and 0's, where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's. Return the 0-based index of the first row that has the most number of 1s. If no such row exists, return -1.

Examples:

Input: arr[][] = [[0, 1, 1, 1],
               [0, 0, 1, 1],
               [1, 1, 1, 1],
               [0, 0, 0, 0]]
Output: 2
Explanation: Row 2 contains 4 1's (0-based indexing).
Input: arr[][] = [[0, 0], 
               [1, 1]]
Output: 1
Explanation: Row 1 contains 2 1's (0-based indexing).
Expected Time Complexity: O(n+m)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ number of rows, number of columns ≤ 103
0 ≤ arr[i][j] ≤ 1 
//java solution
class Solution {
    public int rowWithMax1s(int arr[][]) {
        // Initialize variables to keep track of the maximum number of 1s found (max)
        // and the index of the row with the maximum number of 1s (maxr)
        int max = 0, maxr = -1;
        
        // Get the number of rows (n) and columns (m) in the 2D array
        int n = arr.length, m = arr[0].length;
        
        // Iterate through each row of the array
        for(int i = 0; i < n; i++){
            // Initialize a temporary variable to count the number of 1s in the current row
            int temp = 0;
            
            // Iterate through each column of the current row
            for(int j = 0; j < m; j++){
                // If the current element is 1, increment the temp counter
                if(arr[i][j] == 1){
                    temp++;
                }
            }
            
            // If the current row has more 1s than the previous maximum,
            // update the max and maxr variables
            if(temp > max){
                max = temp;
                maxr = i;
            }
        }
        
        // Return the index of the row with the maximum number of 1s
        return maxr;
    }
}
