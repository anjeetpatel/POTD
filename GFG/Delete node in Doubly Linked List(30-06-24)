Given a doubly Linked list and a position. The task is to delete a node from a given position (position starts from 1) in a doubly linked list and return the head of the doubly Linked list.

Examples:

Input: LinkedList = 1 <--> 3 <--> 4, x = 3
Output: 1 3  
Explanation: 
After deleting the node at position 3 (position starts from 1),the linked list will be now as 1 <--> 3.
 
Input: LinkedList = 1 <--> 5 <--> 2 <--> 9, x = 1
Output: 5 2 9
Explanation:

Expected Time Complexity: O(n)
Expected Auxilliary Space: O(1)

Constraints:
2 <= size of the linked list(n) <= 105
1 <= x <= n
1 <= node.data <= 109



//java solution
class Solution {
    public Node deleteNode(Node head, int x) {
        if(x==1)
        {
            head=head.next;
            head.prev=null;
        }
        else
        {
        Node temp=head;
        Node temp1=new Node(0);
        int c=1;
        while(c!=x)
        {
            temp1=temp;
            temp=temp.next;
            c++;
        }
        temp.prev=null;
        if(temp.next==null)
        {
            temp1.next=null;
        }
        else
        {
            temp1.next=temp1.next.next;
            temp1.next.prev=temp1;
        }
    }
        return head;
    }
    
}

