You are given an Undirected Graph having unit weight of the edges, find the shortest path from src to all the vertex and if it is unreachable to reach any vertex, then return -1 for that vertex.

Examples :

Input:
n = 9, m = 10
edges=[[0,1],[0,3],[3,4],[4,5],[5,6],[1,2],[2,6],[6,7],[7,8],[6,8]] 
src=0
Output:
0 1 2 1 2 3 3 4 4

Input:
n = 4, m = 2
edges=[[1,3],[3,0]] 
src=3
Output:
1 1 -1 0

Constraint:
1<=n,m<=104
0<=edges[i][j]<=n-1

Expected Time Complexity: O(N + E), where N is the number of nodes and E is the edges
Expected Space Complexity: O(N)
//java solution
class Solution {
    
    public int[] shortestPath(int[][] edges,int n,int m ,int src) {
        // Code here
        ArrayList<ArrayList<Integer>>adjList = new ArrayList<>();
        for(int i = 0;i<n;i++)
        adjList.add(new ArrayList<>());
        
        for(int i = 0;i<m;i++)
        {
            adjList.get(edges[i][0]).add(edges[i][1]);
            adjList.get(edges[i][1]).add(edges[i][0]);
            
        }
        int[]ans = new int[n];
        Arrays.fill(ans,-1);
        boolean[]visited= new boolean[n];
        Queue<Integer>q = new LinkedList<>();
        visited[src] = true;
        q.add(src);
        ans[src] = 0;
        while(!q.isEmpty())
        {
            int u = q.poll();
            for(int v:adjList.get(u))
            {
                if(visited[v]==false)
                {
                    visited[v] = true;
                    q.add(v);
                    ans[v] = ans[u]+1;
                }
            }
        }
        return ans;
        
    }
}
