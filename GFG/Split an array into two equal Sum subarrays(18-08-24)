Given an array of integers arr, return true if it is possible to split it in two subarrays (without reordering the elements), such that the sum of the two subarrays are equal. If it is not possible then return false.

Examples:

Input: arr = [1, 2, 3, 4, 5, 5]
Output: true
Explanation: In the above example, we can divide the array into two subarrays with eqaul sum. The two subarrays are: [1, 2, 3, 4] and [5, 5]. The sum of both the subarrays are 10. Hence, the answer is true.
Input: arr = [4, 3, 2, 1]
Output: false
Explanation: In the above example, we cannot divide the array into two subarrays with eqaul sum. Hence, the answer is false.
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)

Constraints:
1<=arr.size()<=105 
1<=arr[i]<=106

//java solution
class Solution {
    public boolean canSplit(int arr[]) {
        int totalSum = 0;
        for (int num : arr) {
            totalSum += num;
        }
        
        // If the total sum is odd, it's not possible to split into two equal parts
        if (totalSum % 2 != 0) {
            return false;
        }
        
        int targetSum = totalSum / 2;
        int currentSum = 0;
        
        // Iterate through the array and check if we can find a point where the sum is equal to targetSum
        for (int num : arr) {
            currentSum += num;
            if (currentSum == targetSum) {
                return true;
            }
        }
        
        return false;
    }
}
