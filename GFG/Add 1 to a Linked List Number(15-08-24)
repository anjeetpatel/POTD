You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 105
0 <= list[i] <= 9
//java solution
class Solution {
Node a=null;
    Node b=null;
    int number=0;
    int sum=0;
    int count=0;
public  Node addOne(Node head) {

    if (count == 0) {
        a = head;
        b = head;
    }
    count++;
    if (head.next == null) {
        if (count == 1) {
            head.data = head.data + 1;
            return head;
        }
        sum = (sum * 10 + head.data) + 1;
        if (sum < 10) {
            count = 0;
            head.data = head.data + 1;
            return a;
        } else {
            number = sum % 10;
            head.data = number;
            sum = sum / 10;
            return head;
        }

    }
    addOne(head.next);
    if (count != 0) {
        count--;
        sum = sum + head.data;
        if (count == 1 && sum >= 10) {
            number = sum % 10;
            head.data = number;
            sum = sum / 10;
            Node c = new Node(sum);
            c.next = head;
            return c;
        }
        number = sum % 10;
        head.data = number;
        sum = sum / 10;
    }
    return a;

}
}
