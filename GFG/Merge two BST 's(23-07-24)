Given two BSTs, return elements of merged BSTs in sorted form.

Examples :

Input:
BST1:
       5
     /   \
    3     6
   / \
  2   4  
BST2:
        2
      /   \
     1     3
            \
             7
            /
           6
Output: 1 2 2 3 3 4 5 6 6 7
Explanation: After merging and sorting the two BST we get 1 2 2 3 3 4 5 6 6 7.
Input:
BST1:
       12
     /   
    9
   / \    
  6   11
BST2:
      8
    /  \
   5    10
  /
 2
Output: 2 5 6 8 9 10 11 12
Explanation: After merging and sorting the two BST we get 2 5 6 8 9 10 11 12.
Expected Time Complexity: O(m+n)
Expected Auxiliary Space: O(Height of BST1 + Height of BST2 + m + n)

Constraints:
1 ≤ Number of Nodes ≤ 105

//java solution 

class Solution {
    public void solve(Node root,List<Integer>ls){
        if(root==null)return;
        solve(root.left,ls);
        ls.add(root.data);
        solve(root.right,ls);
    }
    public List<Integer> merge(Node root1, Node root2) {
        List<Integer>ls1=new ArrayList<>();
        List<Integer>ls2=new ArrayList<>();
         List<Integer>ans=new ArrayList<>();
        solve(root1,ls1);
        solve(root2,ls2);
        int n=ls1.size();int m=ls2.size();int i=0;int j=0;
        while(i<n || j<m){
            if(i<n && j<m && ls2.get(j)>=ls1.get(i)){
                ans.add(ls1.get(i++));
            }
            else if(i<n && j<m && ls2.get(j)<ls1.get(i)){
                ans.add(ls2.get(j++));
            }
            else if(i<n){
                 ans.add(ls1.get(i++));
            }
            else{
                 ans.add(ls2.get(j++));
            }
        }
        return ans;
    }
}
