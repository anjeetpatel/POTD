Given a number n, find the number of binary strings of length n that contain consecutive 1's in them. Since the number can be very large, return the answer after modulo with 1e9+7.

Example 1:

Input:
n = 2
Output:
1
Explanation:
There are 4 strings of 
length 2, the strings 
are 00, 01, 10, and 
11. Only the string 11 
has consecutive 1's.
Example 2:

Input:
n = 5
Output:
19
Explanation:
There are 19 strings
having consecutive 1's.
Your Task:

You don't need to read input or print anything. Your task is to complete the function numberOfConsecutiveOnes() which takes an integer n and returns the number of binary strings that contain consecutive 1's in them.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

//java solution
class Solution {
    // Function to calculate the number of binary strings of length n that contain consecutive 1's
    static int numberOfConsecutiveOnes(int n) {
        // Define the modulo constant as 1e9 + 7
        final int MOD = 1000000007;

        // Initialize an array to store the number of valid binary strings for each length up to n
        int[] dp = new int[n + 1];

        // Base cases initialization:
        // dp[0] = 0 since no binary strings of length 0
        // dp[1] = 0 since no binary strings of length 1 can have consecutive 1's
        // dp[2] = 1 since the binary string "11" is the only string of length 2 with consecutive 1's
        dp[0] = 0;
        dp[1] = 0;
        dp[2] = 1;

        // If n is less than 3, return the precomputed value from the dp array
        if (n < 3) {
            return dp[n];
        }

        // Variables to store previous values in the sequence
        int a = 0;
        int b = 1;

        // Loop to fill the dp array from 3 to n
        for (int i = 3; i <= n; i++) {
            // Calculate the current value based on previous values
            int c = (a + b) % MOD;

            // Update dp[i] using the given recurrence relation
            // The formula combines the result of previous length multiplied by 2 plus the current calculated value
            dp[i] = ((dp[i - 1] * 2) % MOD + c) % MOD;

            // Update a and b for the next iteration to maintain the sequence
            a = b;
            b = c;
        }

        // Return the result for the given length n
        return dp[n];
    }
}
