Given a binary tree and an integer target, check whether there is a root-to-leaf path with its sum as target.

Examples :

Input: tree = 1, target = 2
            /   \
          2     3
Output: false
Explanation: There is no root to leaf path with sum 2.
Input: tree = 1,  target = 4
            /   \
          2     3
Output: true
Explanation: The sum of path from leaf node 3 to root 1 is 4.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(height of tree)

Constraints:
1 ≤ number of nodes ≤ 104
1 ≤ target ≤ 106
//JAVA SOLUTION
class Solution {
    public boolean hasPathSum(Node root, int target) {
        // Base case: if the tree is empty, return false
        if (root == null) {
            return false;
        }

        // If we've reached a leaf node, check if the remaining sum equals the leaf node's value
        if (root.left == null && root.right == null) {
            return target == root.data;
        }

        // Recursively check the left and right subtrees with the updated sum
        int newTarget = target - root.data;
        return hasPathSum(root.left, newTarget) || hasPathSum(root.right, newTarget);
    }
}
