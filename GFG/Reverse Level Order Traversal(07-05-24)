Given a binary tree of size n, find its reverse level order traversal. ie- the traversal must begin from the last level.

Example 1:

Input :
        1
      /   \
     3     2

Output: 
3 2 1
Explanation:
Traversing level 1 : 3 2
Traversing level 0 : 1
Example 2:

Input :
       10
      /  \
     20   30
    / \ 
   40  60

Output: 
40 60 20 30 10
Explanation:
Traversing level 2 : 40 60
Traversing level 1 : 20 30
Traversing level 0 : 10
Your Task: 
You don't need to read input or print anything. Complete the function reverseLevelOrder() which takes the root of the tree as input parameter and returns a list containing the reverse level order traversal of the given tree.

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 ≤ n ≤ 104
//java solution
class Tree
{
    List<List<Integer>> list;
    public ArrayList<Integer> reverseLevelOrder(Node node) 
    {
        // code here
        list = new ArrayList<>();
        traverse(node, 1);
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=list.size()-1; i>=0; i--){
            for(int num : list.get(i)){
                res.add(num);
            }
        }
        return res;
    }
    
    private void traverse(Node node, int level){
        if(node == null) return;
        if(list.size() <= level){
            list.add(new ArrayList<>());
        }
        list.get(level-1).add(node.data);
        traverse(node.left, level+1);
        traverse(node.right, level+1);
    }
}        
