Given two arrays of integers a[] and b[] of size n and m, the task is to check if a pair of values (one value from each array) exists such that swapping the elements of the pair will make the sum of two arrays equal.

Note: Return 1 if there exists any such pair otherwise return -1.

Example 1:

Input: n = 6, m = 4, a[] = {4, 1, 2, 1, 1, 2}, b[] = (3, 6, 3, 3)
Output: 1
Explanation: Sum of elements in a[] = 11, Sum of elements in b[] = 15, To get same sum from both arrays, we can swap following values: 1 from a[] and 3 from b[]
Example 2:

Input: n = 4, m = 4, a[] = {5, 7, 4, 6}, b[] = {1, 2, 3, 8}
Output: 1
Explanation: We can swap 6 from array a[] and 2 from array b[]
Expected Time Complexity: O(mlogm+nlogn).
Expected Auxiliary Space: O(1).

Constraints:
1 ≤ n, m ≤ 106
0 <= a[i], b[i] <= 105

//java solution

class Solution {
    long findSwapValues(long a[], int n, long b[], int m) {
        Set<Long> set = new HashSet<>();
        
        long aSum = Arrays.stream(a).sum();
        long bSum = Arrays.stream(b).sum();
        long diff = Math.abs(aSum - bSum);
        if(diff == 0)
            return 1;
        if((aSum + bSum) % 2 == 1)
            return -1;
        
       for(int i = 0 ; i < a.length ; i++)
           set.add(a[i]);
       
       for(int i = 0 ; i < b.length ; i++){
           if(set.contains(diff-b[i]))
            return 1;
       }
        return -1;
    }
}
