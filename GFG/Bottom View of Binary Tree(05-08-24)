Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)

Constraints:
1 <= Number of nodes <= 105
1 <= Data of a node <= 105



//java solution
class Solution {

    // Define a custom Pair class to store the vertical level and node value
    class Pair {
        int y; // Vertical level
        int data; // Node value

        Pair(int y, int data) {
            this.y = y;
            this.data = data;
        }
    }

    // Method to perform the recursive traversal and populate the map
    public void solve(Node root, int x, int y, TreeMap<Integer, Pair> mp) {
        // Base case: if the current node is null, return
        if (root == null) {
            return;
        }

        // Check if the current horizontal distance is not present in the map
        // or the vertical level is greater or equal to the current stored level
        if (!mp.containsKey(x) || mp.get(x).y <= y) {
            mp.put(x, new Pair(y, root.data));
        }

        // Recur for left and right children
        solve(root.left, x - 1, y + 1, mp);
        solve(root.right, x + 1, y + 1, mp);
    }

    // Function to return a list containing the bottom view of the given tree
    public ArrayList<Integer> bottomView(Node root) {
        TreeMap<Integer, Pair> mp = new TreeMap<>();
        ArrayList<Integer> ans = new ArrayList<>();

        // Populate the TreeMap using the solve function
        solve(root, 0, 0, mp);

        // Extract the values from the map and add them to the result list
        for (Map.Entry<Integer, Pair> entry : mp.entrySet()) {
            ans.add(entry.getValue().data);
        }

        return ans;
    }
}
